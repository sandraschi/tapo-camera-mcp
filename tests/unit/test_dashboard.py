#!/usr/bin/env python3
"""
Tests for web dashboard and API endpoints.
"""
import sys
import os
import asyncio
from unittest.mock import Mock, AsyncMock, patch

# Add the src path to Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

def test_web_server_creation():
    """Test web server creation and initialization."""
    try:
        from tapo_camera_mcp.web.server import TapoWebServer

        # Test server creation
        server = TapoWebServer()
        assert hasattr(server, 'app'), "Web server should have app attribute"
        assert hasattr(server, 'host'), "Web server should have host attribute"
        assert hasattr(server, 'port'), "Web server should have port attribute"

        print("‚úÖ Web server creation test passed")
        return True
    except Exception as e:
        print(f"‚ùå Web server creation test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_web_routes():
    """Test web server routes and endpoints."""
    try:
        from tapo_camera_mcp.web.server import TapoWebServer

        server = TapoWebServer()

        # Test that server has required routes
        app = server.app

        # Check for basic routes (these would be defined in the server)
        # Note: We can't easily test actual route registration without starting the server

        print("‚úÖ Web routes structure test passed")
        return True
    except Exception as e:
        print(f"‚ùå Web routes test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_api_endpoints():
    """Test API endpoints structure."""
    try:
        # Test that API modules can be imported
        from tapo_camera_mcp.api import v1

        # Check that API v1 module exists and has endpoints
        assert hasattr(v1, 'endpoints'), "API v1 should have endpoints module"

        print("‚úÖ API endpoints structure test passed")
        return True
    except Exception as e:
        print(f"‚ùå API endpoints test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_camera_api_endpoints():
    """Test camera API endpoints."""
    try:
        from tapo_camera_mcp.api.v1.endpoints import cameras

        # Test that cameras module has expected functions
        # Note: These would be actual endpoint functions

        print("‚úÖ Camera API endpoints structure test passed")
        return True
    except Exception as e:
        print(f"‚ùå Camera API endpoints test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_media_api_endpoints():
    """Test media API endpoints."""
    try:
        from tapo_camera_mcp.api.v1.endpoints import media

        # Test that media module has expected functions

        print("‚úÖ Media API endpoints structure test passed")
        return True
    except Exception as e:
        print(f"‚ùå Media API endpoints test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_ptz_api_endpoints():
    """Test PTZ API endpoints."""
    try:
        from tapo_camera_mcp.api.v1.endpoints import ptz

        # Test that PTZ module has expected functions

        print("‚úÖ PTZ API endpoints structure test passed")
        return True
    except Exception as e:
        print(f"‚ùå PTZ API endpoints test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_system_api_endpoints():
    """Test system API endpoints."""
    try:
        from tapo_camera_mcp.api.v1.endpoints import system

        # Test that system module has expected functions

        print("‚úÖ System API endpoints structure test passed")
        return True
    except Exception as e:
        print(f"‚ùå System API endpoints test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_web_static_files():
    """Test web static files and templates."""
    try:
        # Test that static directories exist
        static_dirs = [
            'src/tapo_camera_mcp/web/static',
            'src/tapo_camera_mcp/web/templates'
        ]

        for dir_path in static_dirs:
            full_path = os.path.join(os.path.dirname(__file__), '..', '..', dir_path)
            if os.path.exists(full_path):
                print(f"‚úÖ Static directory exists: {dir_path}")
            else:
                print(f"‚ö†Ô∏è  Static directory missing: {dir_path}")

        print("‚úÖ Web static files structure test passed")
        return True
    except Exception as e:
        print(f"‚ùå Web static files test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    tests = [
        test_web_server_creation,
        test_web_routes,
        test_api_endpoints,
        test_camera_api_endpoints,
        test_media_api_endpoints,
        test_ptz_api_endpoints,
        test_system_api_endpoints,
        test_web_static_files,
    ]

    passed = 0
    total = len(tests)

    for test in tests:
        if test():
            passed += 1
        print()

    print(f"üìä Results: {passed}/{total} tests passed")

    if passed == total:
        print("üéâ All dashboard tests passed!")
        sys.exit(0)
    else:
        print("‚ùå Some dashboard tests failed")
        sys.exit(1)
