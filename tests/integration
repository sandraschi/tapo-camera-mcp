"""
A simplified version of the Tapo Camera MCP server for debugging.
"""
import sys
import os
import logging
import asyncio
import traceback
import importlib
from pathlib import Path

# Add the src directory to the Python path
src_path = str(Path(__file__).parent / "src")
sys.path.insert(0, src_path)

# Configure logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

async def test_tool_discovery():
    """Test tool discovery functionality."""
    try:
        logger.info("Testing tool discovery...")
        
        # Import the discovery module directly
        logger.info("Importing discovery module...")
        from tapo_camera_mcp.tools.discovery import discover_tools
        
        # Try to discover tools
        logger.info("Discovering tools...")
        tools = discover_tools('tapo_camera_mcp.tools')
        
        logger.info(f"Discovered {len(tools)} tools:")
        for tool in tools:
            logger.info(f"- {tool.__name__}")
            
        return True
    except Exception as e:
        logger.error(f"Error in test_tool_discovery: {e}", exc_info=True)
        return False

async def main():
    """Simplified main function to test the server."""
    try:
        logger.info("Starting simplified Tapo Camera MCP server...")
        
        # First, test tool discovery
        if not await test_tool_discovery():
            logger.error("Tool discovery test failed!")
            return
            
        logger.info("Importing TapoCameraServer...")
        
        # Import the TapoCameraServer with more detailed error handling
        try:
            from tapo_camera_mcp.core.server import TapoCameraServer
            logger.info("Successfully imported TapoCameraServer")
        except Exception as e:
            logger.error(f"Failed to import TapoCameraServer: {e}")
            logger.error(traceback.format_exc())
            return
        
        try:
            # Create an instance of the server
            logger.info("Creating TapoCameraServer instance...")
            server = TapoCameraServer()
            
            # Initialize the server
            logger.info("Initializing server...")
            await server.initialize()
            
            logger.info("Server initialized successfully!")
            
            # Keep the server running
            while True:
                await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"Error in server initialization: {e}")
            logger.error(traceback.format_exc())
            raise
            
    except Exception as e:
        logger.error(f"Error in main: {e}")
        logger.error(traceback.format_exc())
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Server stopped by user")
    except Exception as e:
        logger.error(f"Unhandled exception: {e}", exc_info=True)
        sys.exit(1)
