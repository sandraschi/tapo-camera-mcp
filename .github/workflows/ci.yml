name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    name: Test with Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Lint and format check with ruff
      run: |
        pip install ruff
        ruff check src/ tests/
        ruff format --check src/ tests/
    
    - name: Run type checking with mypy
      run: |
        pip install mypy
        mypy tapo_camera_mcp/
    
    - name: Run tests with pytest
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pip install pytest pytest-cov pytest-asyncio
        pytest --cov=tapo_camera_mcp --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build packages
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build Python package
      run: |
        python -m build

    - name: Verify built Python package
      run: |
        pip install twine
        twine check dist/*.whl dist/*.tar.gz

    - name: Install MCPB CLI
      run: |
        npm install -g @anthropic-ai/mcpb
        mcpb --version

    - name: Validate MCPB manifest
      run: mcpb validate mcpb/manifest.json

    - name: Build MCPB package
      run: |
        mcpb pack . dist/tapo-camera-mcp.mcpb

    - name: Verify MCPB package
      run: |
        ls -lh dist/
        file dist/tapo-camera-mcp.mcpb || echo "MCPB package created"

    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: dist/

    - name: Publish to PyPI
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true

  security:
    name: Security checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]" bandit[toml] safety[toml]

    - name: Run security linting with bandit
      run: |
        bandit -r tapo_camera_mcp/ -f json -o bandit-report.json || true

    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

    - name: Run dependency vulnerability scan with safety
      run: |
        safety check --output json > safety-report.json || true

    - name: Upload safety report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-report
        path: safety-report.json
