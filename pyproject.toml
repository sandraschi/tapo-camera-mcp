[build-system]
requires = ["setuptools>=42.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tapo-camera-mcp"
version = "1.1.0"  # Live dashboard working - major breakthrough
description = "ðŸ”¥ Production-ready FastMCP 2.12 server for TP-Link Tapo cameras with PTZ control, real-time monitoring, and Claude Desktop integration"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
authors = [
    {name = "Tapo Camera MCP Team", email = "tapo-camera-mcp@example.com"},
]
maintainers = [
    {name = "Tapo Camera MCP Maintainers", email = "tapo-camera-mcp@example.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Home Automation",
    "Topic :: Multimedia :: Video :: Capture",
    "Typing :: Typed",
    "Framework :: FastMCP"
]
keywords = ["tapo", "tplink", "camera", "mcp", "fastmcp", "home-automation"]

dependencies = [
    # Core dependencies
    "fastmcp>=2.12.0,<3.0.0",      # MCP 2.12.0 stdio protocol
    "pytapo>=3.3.48,<4.0.0",       # Tapo camera control
    "pydantic>=2.0.0,<3.0.0",      # Data validation and settings management
    "python-dotenv>=1.0.0,<2.0.0", # Environment variable management
    "aiohttp>=3.9.0,<4.0.0",       # Async HTTP client
    "pillow>=10.0.0,<11.0.0",      # Image processing
    "numpy>=1.24.0,<2.0.0",        # Image array manipulation
    "opencv-python>=4.8.0,<5.0.0", # Computer vision and video processing
    "ring-doorbell>=0.7.0,<1.0.0", # Ring doorbell camera support
    "ffmpeg-python>=0.2.0,<1.0.0", # FFmpeg integration
    "python-multipart>=0.0.6,<1.0.0", # File upload handling
    "pyyaml>=6.0.0,<7.0.0",        # YAML config parsing
    "aiofiles>=23.1.0,<24.0.0",    # Async file operations
    "httpx>=0.23.0,<1.0.0",        # Async HTTP client
    "python-jose[cryptography]>=3.3.0,<4.0.0", # JWT authentication
    "oauthlib>=3.2.0,<4.0.0",      # OAuth authentication
    "requests-oauthlib>=1.3.0,<2.0.0", # OAuth requests
    "fastapi>=0.104.0,<1.0.0",     # REST API framework
    "uvicorn[standard]>=0.24.0,<1.0.0", # ASGI server
    "passlib[bcrypt]>=1.7.4,<2.0.0", # Password hashing
    "email-validator>=2.0.0,<3.0.0", # Email validation
    "tenacity>=8.0.0,<9.0.0"       # Retry logic
]

[project.optional-dependencies]
# Development dependencies
dev = [
    # Testing
    "pytest>=7.0.0,<8.0.0",
    "pytest-asyncio>=0.20.0,<1.0.0",
    "pytest-mock>=3.10.0,<4.0.0",
    "pytest-cov>=4.0.0,<5.0.0",
    "pytest-xdist>=3.0.0,<4.0.0",  # Parallel test execution
    "pytest-benchmark>=4.0.0,<5.0.0",  # Performance testing
    "pytest-html>=4.0.0,<5.0.0",   # HTML test reports
    "pytest-sugar>=0.9.0,<1.0.0",  # Better test output
    "respx>=0.20.0,<1.0.0",        # Mock HTTP requests
    "asynctest>=0.13.0,<1.0.0",    # Async test utilities
    "hypothesis>=6.0.0,<7.0.0",    # Property-based testing
    "freezegun>=1.0.0,<2.0.0",     # Time freezing for tests
    "pytest-aiohttp>=1.0.0,<2.0.0", # Async HTTP testing
    "pytest-timeout>=2.0.0,<3.0.0", # Test timeouts
    "pytest-env>=0.8.0,<1.0.0",    # Environment variables in tests
    
    # Code quality
    "ruff>=0.1.0,<1.0.0",              # Fast Python linter and formatter
    "mypy>=1.0.0,<2.0.0",
    "pylint>=2.12.0,<3.0.0",
    "flake8>=5.0.0,<7.0.0",
    "bandit>=1.7.0,<2.0.0",        # Security linting
    "safety>=2.0.0,<3.0.0",        # Dependency vulnerability scanning
    "pre-commit>=2.20.0,<3.0.0",   # Git hooks
    "mypy-extensions>=0.4.0,<1.0.0",
    "types-pillow>=10.0.0",
    "types-python-dateutil>=2.8.0",
    "types-PyYAML>=6.0.0",
    "types-requests>=2.28.0",
    "types-pytz>=2022.1.0",
    "types-six>=1.16.0",
    
    # Documentation
    "sphinx>=5.0.0,<8.0.0",
    "sphinx-rtd-theme>=1.0.0,<2.0.0",
    "sphinx-autodoc-typehints>=1.0.0,<2.0.0",
    "myst-parser>=0.18.0,<1.0.0",
    "sphinx-copybutton>=0.5.0,<1.0.0",
    "sphinxcontrib-mermaid>=0.8.0,<1.0.0",  # For diagrams
    "sphinxcontrib-httpdomain>=1.8.0,<2.0.0",
    "sphinxcontrib-httpexample>=0.1.0,<1.0.0",
    "sphinxcontrib-versioning>=3.0.0,<4.0.0",
    
    # Development tools
    "ipython>=8.0.0,<9.0.0",
    "jupyter>=1.0.0,<2.0.0",
    "jupyterlab>=3.0.0,<4.0.0",
    "pdbpp>=0.10.0,<1.0.0",
    "ipdb>=0.13.0,<1.0.0",
    "debugpy>=1.6.0,<2.0.0",
    "pudb>=2022.0.0,<2023.0.0",
    "py-spy>=0.3.0,<1.0.0",  # Profiling
    "memory-profiler>=0.60.0,<1.0.0",
    "pyinstrument>=4.0.0,<5.0.0",
    "snakeviz>=2.2.0,<3.0.0"
]

# Documentation dependencies
docs = [
    "sphinx>=5.0.0,<8.0.0",
    "sphinx-rtd-theme>=1.0.0,<2.0.0",
    "sphinx-autodoc-typehints>=1.0.0,<2.0.0",
    "myst-parser>=0.18.0,<1.0.0",
    "sphinx-copybutton>=0.5.0,<1.0.0",
    "sphinxcontrib-mermaid>=0.8.0,<1.0.0",
    "sphinxcontrib-httpdomain>=1.8.0,<2.0.0",
    "sphinxcontrib-httpexample>=0.1.0,<1.0.0",
    "sphinxcontrib-versioning>=3.0.0,<4.0.0",
    "sphinx-issues>=3.0.0,<4.0.0",
    "sphinx-notfound-page>=0.7.0,<1.0.0"
]

[project.urls]
Homepage = "https://github.com/yourusername/tapo-camera-mcp"
Documentation = "https://tapo-camera-mcp.readthedocs.io/"
Changelog = "https://github.com/yourusername/tapo-camera-mcp/blob/main/CHANGELOG.md"
"Bug Tracker" = "https://github.com/yourusername/tapo-camera-mcp/issues"
Source = "https://github.com/yourusername/tapo-camera-mcp"

[project.scripts]
tapo-camera-mcp = "tapo_camera_mcp.cli_v2:main"
tapo-llms = "tapo_camera_mcp.cli:main"

[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "ARG", # flake8-unused-arguments
    "PIE", # flake8-pie
    "TCH", # flake8-type-checking
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "NPY", # numpy
    "RUF", # ruff-specific rules
]
ignore = [
    "E501", # line too long, handled by ruff formatter
    "B008", # do not perform function calls in argument defaults
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "S101", # use of assert detected
    "S311", # standard pseudo-random generators are not suitable for cryptographic purposes
    "S603", # subprocess call - check for execution of untrusted input
    "S607", # starting a process with a partial executable path
    "TRY003", # avoid specifying long messages outside the exception class
    "NPY002", # replace legacy numpy.random
    "RUF012", # mutable class attributes should be annotated with `typing.ClassVar`
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "S101", # use of assert detected
    "S106", # possible hardcoded password
    "PLR2004", # magic value used in comparison
    "ARG", # unused function argument
    "RET504", # unnecessary assignment before return
]

[tool.pylint.master]
load-plugins = "pylint.ext.mccabe"

[tool.pylint.messages_control]
disable = [
    # Documentation
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    
    # Design
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "R0902",  # too-many-instance-attributes
    "R0912",  # too-many-branches
    "R0914",  # too-many-locals
    "R0915",  # too-many-statements
    "R0911",  # too-many-return-statements
    
    # Variables
    "W0613",  # unused-argument
    "W0621",  # redefined-outer-name (common in pytest fixtures)
    "W0212",  # protected-access (needed for testing)
    
    # Type hints
    "C0415",  # import-outside-toplevel (sometimes needed for type checking)
    "E1136",  # unsubscriptable-object (false positives with type hints)
]

[project.entry-points."fastmcp.plugins"]
tapo_camera = "tapo_camera_mcp.plugin:register_plugin"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = "test_*.py"
addopts = "-v --cov=tapo_camera_mcp --cov-report=term-missing"

[tool.coverage.run]
source = ["tapo_camera_mcp"]
omit = [
    "**/tests/**",
    "**/__main__.py",
    "**/version.py",
    "**/migrations/**"
]

[tool.coverage.report]
show_missing = true
skip_covered = true
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = ["pytapo.*"]
ignore_missing_imports = true
